@persist Objects:table Render:table

#include "xbyte_3d_engine/graphics"
#include "xbyte_3d_engine/controls"

function void render_init( T:table ) {
    local TriangleCount = 0
    
    foreach( I:number, Obj:table = T[8, table] ) {
        Obj["Index", number] = TriangleCount
        TriangleCount += Obj["Triangles", array]:count()
    }
    
    Render[ "think", number ] = 100
    Render["screen", wirelink] = T[1, wirelink]
    Render["camera", table] = table( "cp" = T[2, vector], "ca" = T[3, angle], "fov" = T[4, number], "znear" = T[5, number], "zfar" = T[6, number], "res" = T[7, vector2] )
    Render["objects", table] = T[8, table]
    
    Render["view", matrix4] = identity4(), # - building an empty view matrix4
    Render["viewport", matrix4] = viewport( 0, 0, T[7, vector2]:x(), T[7, vector2]:y(), 0, 1 ), # - building viewport matrix4
    Render["project", matrix4] = perspective( T[4, number], T[7, vector2]:x() / T[7, vector2]:y(), T[5, number], T[6, number] ) # - building perspective projection matrix4
    
    Render["debugmode", number] = T[9, number]
}

function void render_think( I ) { Render[ "think", number ] = I }
function number render_think() { return Render[ "think", number ] }
function wirelink render_screen() { return Render["screen", wirelink] } # - get EGP
function table render_objects() { return Render["objects", table] } # - get objects
function table render_camera() { return Render["camera", table] } # - get camera

function vector camera_pos() { return render_camera()["cp", vector] } # - get camera position
function angle camera_ang() { return render_camera()["ca", angle] } # - get camera angles
function number camera_fov() { return render_camera()["fov", number] } # - get camera fov
function vector2 camera_znear() { return render_camera()["znear", vector2] } # - get camera znear
function vector2 camera_zfar() { return render_camera()["zfar", vector2] } # - get camera zfar
function vector2 camera_res() { return render_camera()["res", vector2] } # - get camera resolution

function table obj_get( Name:string ) { return render_objects()[Name, table] } # - get object by name

function void scene_init() {
    if( Render["debugmode", number] ) {
        local Res = camera_res()
        
        render_screen():text( 297, "pos: " + floor( camera_pos():x(), 2 ) + " " + floor( camera_pos():y(), 2 ) + " " + floor( camera_pos():z(), 2 ), 10, "Tahoma", vec2( Res:x() - 96, 6 ), vec4( 255 ) )
        render_screen():text( 298, "ang: " + camera_ang():pitch() + " " + camera_ang():yaw() + " " + camera_ang():roll(), 10, "Tahoma", vec2( Res:x() - 96, 14 ), vec4( 255 ) )
        render_screen():text( 299, "triangles: nan", 10, "Tahoma", vec2( Res:x() - 96, 22 ), vec4( 255 ) )
        render_screen():text( 300, "visible triangles: nan" , 10, "Tahoma", vec2( Res:x() - 96, 30 ), vec4( 255 ) )
        
        render_screen():egpAlign( 297, 0, 1 )
        render_screen():egpAlign( 298, 0, 1 )
        render_screen():egpAlign( 299, 0, 1 )
        render_screen():egpAlign( 300, 0, 1 )
    }
}

function void initialize( This:table ) {
    render_init( This )
    scene_init()
}

